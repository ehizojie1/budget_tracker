type BudgetEntry {
  id: ID!
  title: String!
  description: String
  amount: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBudgetEntryConnection {
  items: [BudgetEntry]!
  nextToken: String
}

input ModelBudgetEntryFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  amount: ModelFloatInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelBudgetEntryFilterInput]
  or: [ModelBudgetEntryFilterInput]
  not: ModelBudgetEntryFilterInput
  owner: ModelStringInput
}

type Query {
  getBudgetEntry(id: ID!): BudgetEntry
  listBudgetEntries(filter: ModelBudgetEntryFilterInput, limit: Int, nextToken: String): ModelBudgetEntryConnection
}

input ModelBudgetEntryConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  amount: ModelFloatInput
  and: [ModelBudgetEntryConditionInput]
  or: [ModelBudgetEntryConditionInput]
  not: ModelBudgetEntryConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateBudgetEntryInput {
  id: ID
  title: String!
  description: String
  amount: Float!
}

input UpdateBudgetEntryInput {
  id: ID!
  title: String
  description: String
  amount: Float
}

input DeleteBudgetEntryInput {
  id: ID!
}

type Mutation {
  createBudgetEntry(input: CreateBudgetEntryInput!, condition: ModelBudgetEntryConditionInput): BudgetEntry
  updateBudgetEntry(input: UpdateBudgetEntryInput!, condition: ModelBudgetEntryConditionInput): BudgetEntry
  deleteBudgetEntry(input: DeleteBudgetEntryInput!, condition: ModelBudgetEntryConditionInput): BudgetEntry
}

input ModelSubscriptionBudgetEntryFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  amount: ModelSubscriptionFloatInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionBudgetEntryFilterInput]
  or: [ModelSubscriptionBudgetEntryFilterInput]
  owner: ModelStringInput
}

type Subscription {
  onCreateBudgetEntry(filter: ModelSubscriptionBudgetEntryFilterInput, owner: String): BudgetEntry @aws_subscribe(mutations: ["createBudgetEntry"])
  onUpdateBudgetEntry(filter: ModelSubscriptionBudgetEntryFilterInput, owner: String): BudgetEntry @aws_subscribe(mutations: ["updateBudgetEntry"])
  onDeleteBudgetEntry(filter: ModelSubscriptionBudgetEntryFilterInput, owner: String): BudgetEntry @aws_subscribe(mutations: ["deleteBudgetEntry"])
}
